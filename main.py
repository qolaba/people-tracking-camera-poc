# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15NJI1Dm4_4Di2cjDsbl_xT85-yCtpyLL
"""

# !pip install ultralytics pytube

from pytube import YouTube

def download_youtube_video(url, output_path='.'):
    try:
        # Create a YouTube object
        yt = YouTube(url)

        # Get the highest resolution stream
        video_stream = yt.streams.get_highest_resolution()

        # Download the video to the specified output path
        video_stream.download(output_path)

        print(f"Video downloaded successfully to {output_path}")

    except Exception as e:
        print(f"An error occurred: {str(e)}")

# Example usage
video_url = "https://www.youtube.com/watch?v=WvhYuDvH17I"
download_youtube_video(video_url, output_path='.')



from IPython.display import HTML
from base64 import b64encode

# Function to display video in Colab
def display_video(file_path, width=600):
    # Read video file as binary data
    video_file = open(file_path, "rb").read()

    # Encode the video file
    video_encoded = b64encode(video_file).decode("utf-8")

    # Create HTML code to embed video
    video_html = """
    <video width="{0}" controls>
        <source src="data:video/mp4;base64,{1}" type="video/mp4">
        Your browser does not support the video tag.
    </video>
    """.format(width, video_encoded)

    # Display the HTML code
    display(HTML(video_html))

# Example usage
video_file_path = "1.mp4"
display_video(video_file_path)

from ultralytics import YOLO

# Load an official or custom model
model = YOLO('yolov8n.pt')

# Perform tracking with the model
results = model.track(source="1.mp4", tracker="bytetrack.yaml", save=True)  # Tracking with default tracker

from IPython.display import HTML
from base64 import b64encode

# Function to display video in Colab
def display_video(file_path, width=600):
    # Read video file as binary data
    video_file = open(file_path, "rb").read()

    # Encode the video file
    video_encoded = b64encode(video_file).decode("utf-8")

    # Create HTML code to embed video
    video_html = """
    <video width="{0}" controls>
        <source src="data:video/mp4;base64,{1}" type="video/mp4">
        Your browser does not support the video tag.
    </video>
    """.format(width, video_encoded)

    # Display the HTML code
    display(HTML(video_html))

# Example usage
video_file_path = "1.mp4"
display_video("/content/runs/detect/track/1.avi")

import cv2
import imghdr
from http.server import SimpleHTTPRequestHandler
from socketserver import TCPServer
import threading
import time

class VideoStreamHandler(SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/video':
            self.send_response(200)
            self.send_header('Content-Type', 'multipart/x-mixed-replace; boundary=frame')
            self.end_headers()

            video_path = '1.mp4'

            cap = cv2.VideoCapture(video_path)

            while True:
                ret, frame = cap.read()
                if not ret:
                    break

                ret, jpeg = cv2.imencode('.jpg', frame)

                if not ret:
                    break

                self.send_frame(jpeg.tobytes())

                # Adjust the sleep time based on the frame rate of your video
                time.sleep(0.1)

            cap.release()
        else:
            super().do_GET()

    def send_frame(self, frame):
        self.wfile.write(b'--frame\r\n')
        self.send_header('Content-Type', 'image/jpeg')
        self.send_header('Content-Length', len(frame))
        self.end_headers()
        self.wfile.write(frame)
        self.wfile.write(b'\r\n')

def run_server():
    port = 8000
    server = TCPServer(('', port), VideoStreamHandler)
    print(f"Server started on port {port}")
    server.serve_forever()

# Start the HTTP server in a separate thread
server_thread = threading.Thread(target=run_server)
server_thread.start()

# You can now access the RTSP stream at: rtsp://localhost:8000/video

import cv2

rtsp_url = "rtsp://localhost:8000/video.mp4"

cap = cv2.VideoCapture(rtsp_url)

if not cap.isOpened():
    print("Unable to open RTSP stream.")
else:
    print("RTSP stream is working.")
    cap.release()

from ultralytics import YOLO

# Load an official or custom model
model = YOLO('yolov8n.pt')

# Perform tracking with the model
results = model.track(source="rtsp://localhost:8000/video", tracker="bytetrack.yaml", save=True)  # Tracking with default tracker